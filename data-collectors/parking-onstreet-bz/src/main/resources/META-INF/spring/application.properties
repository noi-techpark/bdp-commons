# Cron definition to start jobs
scheduler.job=${SCHEDULER_CRON:*/10 * * * * *}

# set scheduler pool size
spring.task.scheduling.pool.size=${SCHEDULER_POOL_SIZE:1}

# The origin of our data set. Who is responsible for what we retrieve?
app.origin=AXIANS

# How often does the the data source update their measurements (in seconds)?
# es. 300 = 5*60 = 5 minutes
app.period=1

# If this parameter is true, a default Station is created if there is a measurement that references a non existent Station
app.check_missing_stations=false

# Station Type fixed attribute values as seen in bdp-core/dal
# This value is hard coded as constant "ParkingSensor" in the Converter class, because it must be given at startup in Pusher.initIntegreenTypology() method

# Google Spreadsheet access parameters. In this sheet is stored anagrafic data of the Parking Sensors
spreadsheetId=1gPWuvmYntWj3IXfZ0uSHm5xNU23IlGVCcPlBb9kK0A0
spreadsheet.range=A1:Z
spreadsheet.requiredFields=sensor_address,id,group,Longitude,Latitude,description
spreadsheet.sheetName=boxes

# Google Spreadsheet column mapping to StationDto attributes. 
# ATTR_ID is mapped to id, ATTR_LNG and ATTR_LAT are mapped to longitude and latitude, ATTR_DESC is mapped to name, ATTR_GROUP is stored as metadata, ATTR_ID2 is for now unused
spreadsheet.ATTR_ID_NAME      = DevEUI
spreadsheet.ATTR_ID2_NAME     = id
spreadsheet.ATTR_GROUP_NAME   = group
spreadsheet.ATTR_LNG_NAME     = Longitude
spreadsheet.ATTR_LAT_NAME     = Latitude
spreadsheet.ATTR_DESC_NAME    = description

encryption.key=

##### Open Data Hub Configuration
# Data provenance (Where does our data come from?)
provenance.name=${ODH_CLIENT_PROVENANCE_NAME:odh-mobility-dc-parking-onstreet-bz}
provenance.version=${ODH_CLIENT_PROVENANCE_VERSION:0.0.0-local-dev}
provenance.origin=${ODH_CLIENT_PROVENANCE_ORIGIN:AXIANS}

# dc-interface configuration (Writer API endpoint)
bdp_host=localhost
bdp_port=8999
bdp_endpoint=localhost

# Keycloak configuration (default = setup for local development)
authorizationUri=${OAUTH_AUTH_URI:https://auth.opendatahub.testingmachine.eu/auth}
tokenUri=${OAUTH_TOKEN_URI:https://auth.opendatahub.testingmachine.eu/auth/realms/noi/protocol/openid-connect/token}
BASE_URI=${OAUTH_BASE_URI:http://localhost:8999/json}
clientId=${OAUTH_CLIENT_ID:odh-mobility-datacollector-development}
clientName=${OAUTH_CLIENT_NAME:odh-mobility-datacollector-development}
clientSecret=${OAUTH_CLIENT_SECRET:7bd46f8f-c296-416d-a13d-dc81e68d0830}
scope=openid

# sets web type to none, since we don't need a web server
# fixes cicrcular dependency issue
spring.main.web-application-type=NONE

# logging.level.com.opendatahub.bdp.commons.dc.meteorology.bz.forecast=trace