scheduler.stations=${SCHEDULER_CRON_STATIONS:*/10 * * * * *}
scheduler.data=${SCHEDULER_CRON_DATA:*/10 * * * * *}
scheduler.dataTypes=${SCHEDULER_CRON_TYPES:*/10 * * * * *}


# Define any property you need for your project, do not configure things inside classes.
# Keeping them here, gives us an overview on what is configurable for this data collector.
# Please describe each property with a short sentence.

# The origin of our data set. Who is responsible for what we retrieve?
app.origin=meteotrentino

# How often does the the data source update their measurements (in seconds)?
# es. 900 = 15*60 = 15 minutes
app.period=900

# Should the collector send only new data to the Data Hub (boolean)?
# The service returns always measurements of last 24 hours (4 measures per hour, so 96 measurements each call)
# If not set the default is TRUE
#   true  = check in the Data Hub last saved record for each station and avoid sending data already pushed
#   false = send to the Data Hub all records read from the service
app.checkDateOfLastRecord = true

# Should the collector push measurements for all stations in a single call or split data and send measurements for each station separately
# Set this parameter to TRUE if the amount of data for all stations becomes too big to be pushed in a single call
# If not set the default is FALSE
#   true  = measurements of each station is pushed separately
#   false = measurements of each station are collected and then pushed in a single call
app.pushDataSingleStation = false

endpoint.stations.url=http://dati.meteotrentino.it/service.asmx/getListOfMeteoStations
endpoint.measurements.url=http://dati.meteotrentino.it/service.asmx/getLastDataOfMeteoStation

# Station fixed attribute values as seen in bdp-core/dal derived from the class "ParkingStation"
app.station.type=MeteoStation

# dc-interface configuration (Writer API endpoint)
bdp_host=localhost
bdp_port=8999
bdp_endpoint=localhost

# endpoint oauth2 configuration
endpoint.oauth.clientId=${ENDPOINT_OAUTH_CLIENT_ID}
endpoint.oauth.clientSecret=${ENDPOINT_OAUTH_CLIENT_SECRET}

# endpoint configuration
endpoint.uri=${ENDPOINT_URI}

# Keycloak configuration (default = setup for local development)
authorizationUri=${OAUTH_AUTH_URI:https://auth.opendatahub.testingmachine.eu/auth}
tokenUri=${OAUTH_TOKEN_URI:https://auth.opendatahub.testingmachine.eu/auth/realms/noi/protocol/openid-connect/token}
BASE_URI=${OAUTH_BASE_URI:http://localhost:8999/json}
clientId=${OAUTH_CLIENT_ID:odh-mobility-datacollector-development}
clientName=${OAUTH_CLIENT_NAME:odh-mobility-datacollector-development}
clientSecret=${OAUTH_CLIENT_SECRET:7bd46f8f-c296-416d-a13d-dc81e68d0830}
scope=openid

# sets web type to none, since we don't need a web server
# fixes cicrcular dependency issue
spring.main.web-application-type=NONE